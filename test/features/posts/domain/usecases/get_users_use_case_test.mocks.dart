// Mocks generated by Mockito 5.2.0 from annotations
// in velowesalt/test/features/posts/domain/usecases/get_users_use_case_test.dart.
// Do not manually edit this file.

import 'dart:async' as _i5;

import 'package:mockito/mockito.dart' as _i1;
import 'package:velowesalt/features/posts/data/datasources/post_remote_data_source.dart'
    as _i3;
import 'package:velowesalt/features/posts/data/datasources/user_remote_data_source.dart'
    as _i2;
import 'package:velowesalt/features/posts/data/repositories/user_repository_impl.dart'
    as _i4;
import 'package:velowesalt/features/posts/domain/entities/user_entity.dart'
    as _i6;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types

class _FakeUserRemoteDataSource_0 extends _i1.Fake
    implements _i2.UserRemoteDataSource {}

class _FakePostRemoteDataSource_1 extends _i1.Fake
    implements _i3.PostRemoteDataSource {}

/// A class which mocks [UserRepositoryImpl].
///
/// See the documentation for Mockito's code generation for more information.
class MockUserRepositoryImpl extends _i1.Mock
    implements _i4.UserRepositoryImpl {
  MockUserRepositoryImpl() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.UserRemoteDataSource get userDataSource => (super.noSuchMethod(
      Invocation.getter(#userDataSource),
      returnValue: _FakeUserRemoteDataSource_0()) as _i2.UserRemoteDataSource);
  @override
  _i3.PostRemoteDataSource get postRemoteDataSource => (super.noSuchMethod(
      Invocation.getter(#postRemoteDataSource),
      returnValue: _FakePostRemoteDataSource_1()) as _i3.PostRemoteDataSource);
  @override
  _i5.Future<List<_i6.UserEntity>> getUsers() => (super.noSuchMethod(
          Invocation.method(#getUsers, []),
          returnValue: Future<List<_i6.UserEntity>>.value(<_i6.UserEntity>[]))
      as _i5.Future<List<_i6.UserEntity>>);
}

/// A class which mocks [UserRepositoryImpl].
///
/// See the documentation for Mockito's code generation for more information.
class MyRepositoryMock extends _i1.Mock implements _i4.UserRepositoryImpl {
  @override
  _i2.UserRemoteDataSource get userDataSource => (super.noSuchMethod(
      Invocation.getter(#userDataSource),
      returnValue: _FakeUserRemoteDataSource_0()) as _i2.UserRemoteDataSource);
  @override
  _i3.PostRemoteDataSource get postRemoteDataSource => (super.noSuchMethod(
      Invocation.getter(#postRemoteDataSource),
      returnValue: _FakePostRemoteDataSource_1()) as _i3.PostRemoteDataSource);
  @override
  _i5.Future<List<_i6.UserEntity>> getUsers() => (super.noSuchMethod(
          Invocation.method(#getUsers, []),
          returnValue: Future<List<_i6.UserEntity>>.value(<_i6.UserEntity>[]))
      as _i5.Future<List<_i6.UserEntity>>);
}
